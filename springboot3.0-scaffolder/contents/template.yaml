apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot30
  title: Create SPRINGBOOT Template
  description: This template creates a SPRINGBOOT project, publishes it to GitHub, registers it in the catalog, creates a Jenkins build job, and sets up Artifactory and SonarQube.
spec:
  owner: team
  type: service
  parameters:
    - title: Component Details
      required:
        - componentName
        - projectSlug
        - repoName
        - jenkinsAgent
      properties:
        componentName:
          title: Component Name
          type: string
          description: Name of the component.
        projectSlug:
          title: Project Slug
          type: string
          enum:
            - project-a
            - sanjaypakale
            - project-c
          description: Select the project slug.
        repoName:
          title: Repository Name
          type: string
          description: Name of the GitHub repository.
        jenkinsAgent:
          title: Jenkins Agent
          type: string
          description: Name of the Jenkins agent.
  steps:
    - id: publish-github
      name: Publish to GitHub
      action: publish:github
      input:
        repoUrl: 'https://github.com/orgname/{{ parameters.repoName }}'
        repoVisibility: public
    - id: register-catalog
      name: Register Catalog
      action: catalog:register
      input:
        catalogInfoUrl: '{{ steps.publish-github.output.repoUrl }}/blob/main/catalog-info.yaml'
    - id: create-jenkins-job
      name: Create Jenkins Build Job
      action: custom:create-jenkins-job
      input:
        jenkinsAgent: '{{ parameters.jenkinsAgent }}'
        repoUrl: '{{ steps.publish-github.output.repoUrl }}'
    - id: create-artifactory-repos
      name: Create Artifactory Repositories
      action: custom:create-artifactory-repos
      input:
        projectSlug: '{{ parameters.projectSlug }}'
    - id: create-sonar-project
      name: Create SonarQube Project
      action: custom:create-sonar-project
      input:
        projectKey: '{{ parameters.projectSlug }}_{{ parameters.repoName }}'
  output:
    links:
      - title: Repository
        url: '{{ steps.publish-github.output.repoUrl }}'
      - title: Catalog
        url: '{{ steps.register-catalog.output.catalogInfoUrl }}'
